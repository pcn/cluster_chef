bash -c '

# This is the ubuntu-10.04-gems script from opscode, but it
# * installs ruby 1.9.2, not 1.8.7
# * upgrades rubygems rather than installing from source
# * pushes the node identity into the first-boot.json
# * installs the chef-client service and kicks off the first run of chef

function throttle_verbosity {
  # This function will send output to /dev/null if
  # knife[:bootstrap_less_verbose] is true
  <%- if @chef_config.knife[:bootstrap_less_verbose] == true %>
  cat > /dev/null
  <%- else %>
  cat
  <% end %>
}

echo "Template: ubuntu10.04-cluster_chef.erb"

<%= (@config[:verbosity].to_i > 1 ? 'set -v' : '') %>

mkdir -p /tmp/knife-bootstrap ; chmod 700 /tmp/knife-bootstrap 
cd /tmp/knife-bootstrap

RUBY_VERSION=1.9.2-p290

<%= "export http_proxy=\"#{knife_config[:bootstrap_proxy]}\"" if knife_config[:bootstrap_proxy] -%>
eval `cat /etc/lsb-release `
export DEBIAN_FRONTEND=noninteractive

if [ ! -f /usr/bin/chef-client ]; then
echo -e "`date` \n\n**** \n**** apt update:\n****\n"  | throttle_verbosity
apt-get    update  | throttle_verbosity
apt-get -y upgrade  | throttle_verbosity

echo -e "`date` \n\n**** \n**** Installing base packages:\n****\n"  | throttle_verbosity
apt-get install -y build-essential wget runit runit-services zlib1g-dev libssl-dev openssl libcurl4-openssl-dev libreadline6-dev libyaml-dev  | throttle_verbosity

echo -e "`date` \n\n**** \n**** Installing ruby version ${RUBY_VERSION}:\n****\n"  | throttle_verbosity

wget ftp://ftp.ruby-lang.org//pub/ruby/1.9/ruby-${RUBY_VERSION}.tar.gz  | throttle_verbosity
tar xzf ruby-${RUBY_VERSION}.tar.gz  | throttle_verbosity
cd ruby-${RUBY_VERSION} 
./configure --with-ruby-version=${RUBY_VERSION} --prefix=/usr --program-suffix=${RUBY_VERSION} 2>&1 | throttle_verbosity
make -j2                             2>&1 | throttle_verbosity
make install                         2>&1 | throttle_verbosity

sudo update-alternatives --remove-all gem && true
update-alternatives \
  --install /usr/bin/ruby ruby /usr/bin/ruby${RUBY_VERSION} 400 \
  --slave   /usr/bin/ri   ri   /usr/bin/ri${RUBY_VERSION}       \
  --slave   /usr/bin/irb  irb  /usr/bin/irb${RUBY_VERSION}      \
  --slave   /usr/bin/erb  erb  /usr/bin/erb${RUBY_VERSION}      \
  --slave   /usr/bin/gem  gem  /usr/bin/gem${RUBY_VERSION}      \
  --slave   /usr/share/man/man1/ruby.1.gz ruby.1.gz             \
  /usr/share/man/man1/ruby${RUBY_VERSION}.1  | throttle_verbosity

if ruby -e "exit(%x{gem --version} < \"1.6.2\" ? 0 : -1 )" ; then
  echo -e "`date` \n\n**** \n**** Updating rubygems:\n****\n"     | throttle_verbosity
  gem install --no-rdoc --no-ri rubygems-update --version=1.6.2   | throttle_verbosity
  update_rubygems --version=1.6.2                                 | throttle_verbosity
fi

echo -e "`date` \n\n**** \n**** Installing chef:\n****\n"            | throttle_verbosity
gem install ohai --no-rdoc --no-ri                                   | throttle_verbosity
gem install chef --no-rdoc --no-ri <%= bootstrap_version_string %>   | throttle_verbosity
gem install      --no-rdoc --no-ri extlib json ruby-shadow right_aws | throttle_verbosity

else # no chef-client
echo -e "`date` \n\n**** \n**** Chef is present -- skipping apt/ruby/chef installation\n****\n"   | throttle_verbosity
fi 

# fix a bug in chef that prevents debugging template errors
bad_template_file='/usr/lib/ruby/gems/1.9.2-p290/gems/chef-0.10.4/lib/chef/mixin/template.rb'
if  echo "0505c482b8b0b333ac71bbc8a1795d19  $bad_template_file" | md5sum -c - 2>/dev/null ; then
  curl https://github.com/mrflip/chef/commit/655a1967253a8759afb54f30b818bbcb7c309198.patch | sudo patch $bad_template_file  | throttle_verbosity
fi

echo -e "`date` \n\n**** \n**** Knifing in the chef client config files:\n****\n"   | throttle_verbosity
mkdir -p /etc/chef

<%- if @config[:client_key] %>
(
cat <<'EOP'
<%= @config[:client_key] %>
EOP
) > /tmp/knife-bootstrap/client.pem
awk NF /tmp/knife-bootstrap/client.pem > /etc/chef/client.pem
<%- else %>
(
cat <<'EOP'
<%= validation_key %>
EOP
) > /tmp/knife-bootstrap/validation.pem
awk NF /tmp/knife-bootstrap/validation.pem > /etc/chef/validation.pem
<%- end %>

# See https://github.com/schisamo/chef/commit/d0789ffd97a5cd221d147874c492111d51be9cc1
# The below relies on the config parameter "encrpyted_data_bag_secret" existing in the 
# knife config.  This allows secrets to be stored on a less trusted server.
echo -e "`date` \n\n**** \n**** Knifing in the chef data bag secret file:\n****\n"   | throttle_verbosity
(
cat <<'EOP'
<%= encrypted_data_bag_secret %>
EOP
) > /tmp/knife-bootstrap/encrypted_data_bag_secret
awk NF /tmp/knife-bootstrap/encrypted_data_bag_secret > /etc/chef/encrypted_data_bag_secret 
chmod 600 /etc/chef/encrypted_data_bag_secret 


echo -e "`date` \n\n**** \n**** Nuking our temp files:\n****\n"   | throttle_verbosity

cd /tmp
# rm -rf /tmp/knife-bootstrap

echo -e "`date` \n\n**** \n**** Creating chef client script:\n****\n"   | throttle_verbosity

(
cat <<'EOP'
<%= config_content %>
<%= @config[:node].chef_client_script_content %>

# Need to monkeypatch the logging initialization in Chef::Application                                         
class Chef::Application
  def configure_logging
    l1 = Chef::Log.init("/var/log/chef/chef-info.log")
    l1.level=(Mixlib::Log::LEVELS[:info])
    l2 = Chef::Log.init(STDOUT)
    l2.level=(Mixlib::Log::LEVELS[:warn])
    STDOUT.sync = true
    l2.formatter = Chef::Log.logger.formatter
    Chef::Log::use_log_devices([l1, l2])
  end
end
Chef::Log.warn("Logging INFO and higher to /var/log/chef/chef-info.log")

# The below is to reduce/eliminate extraneous logging from the execute resource. 
# It may not be enough by itself, since the use of opts[:live_stream] is duplicated 
# in a couple of places. 
# This is specifically to make the apt LWRP quiet.
# The difference here is that opts[:live_stream] is always set to nil 
class Chef::Provider::Execute
  def action_run
    opts = {}

    if sentinel_file = @new_resource.creates
      if ::File.exists?(sentinel_file)
        Chef::Log.debug("#{@new_resource} sentinel file #{sentinel_file} exists - nothing to do")
        return false
      end
    end

    # original implementation did not specify a timeout, but ShellOut                                                    
    # *always* times out. So, set a very long default timeout                                                            
    opts[:timeout] = @new_resource.timeout || 3600
    opts[:returns] = @new_resource.returns if @new_resource.returns
    opts[:environment] = @new_resource.environment if @new_resource.environment
    opts[:user] = @new_resource.user if @new_resource.user
    opts[:group] = @new_resource.group if @new_resource.group
    opts[:cwd] = @new_resource.cwd if @new_resource.cwd
    opts[:umask] = @new_resource.umask if @new_resource.umask
    opts[:live_stream] = nil

    result = shell_out!(@new_resource.command, opts)
    @new_resource.updated_by_last_action(true)
    Chef::Log.info("#{@new_resource} ran successfully")
  end
end
Chef::Log.warn("All executing messages (including apt) being suppressed by /etc/chef/client.rb")

EOP
) > /etc/chef/client.rb

(
cat <<'EOP'
<%= { "run_list" => @run_list, "cluster_name" => @config[:node].cluster_name, "facet_name" => @config[:node].facet_name, "facet_index" => @config[:node].facet_index }.to_json %>
EOP
) > /etc/chef/first-boot.json

echo -e "`date` \n\n**** \n**** Adding chef client runit scripts:\n****\n"                   | throttle_verbosity
service chef-client stop >/dev/null 2>&1 ; sleep 1 ; killall chef-client 2>/dev/null ; true  | throttle_verbosity
mkdir -p /var/log/chef /var/chef /etc/service /etc/sv/chef-client/{log/main,supervise} 
cat > /etc/sv/chef-client/log/run <<EOF
#!/bin/bash
exec svlogd -tt ./main
EOF
cat > /etc/sv/chef-client/run <<EOF
#!/bin/bash
exec 2>&1
exec /usr/bin/env chef-client -i 43200 -s 20 -L /var/log/chef/client.log
EOF
chmod +x  /etc/sv/chef-client/log/run /etc/sv/chef-client/run
ln -nfs /usr/bin/sv /etc/init.d/chef-client

service chef-client stop    | throttle_verbosity ; true

<%- if (@config[:bootstrap_runs_chef_client].to_s == 'true') || (@chef_config.knife[:bootstrap_runs_chef_client].to_s == 'true') %>
echo -e "`date` \n\n**** \n**** First run of chef:\n****\n"    | throttle_verbosity
set -e
<%= start_chef %>
set +e
<%- end %>

echo -e "`date` \n\n**** \n**** Cleanup:\n****\n"  | throttle_verbosity
# updatedb

echo -e "`date` \n\n**** \n**** Cluster Chef client bootstrap complete\n****\n"
'
